cmake_minimum_required( VERSION 2.8 )
SET(CMAKE_CXX_STANDARD 14)
project( mine )
IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
	MESSAGE(STATUS "other platform: ${CMAKE_SYSTEM_NAME}")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
	MESSAGE(STATUS "platform: ${CMAKE_SYSTEM_NAME}")
	set(3RDPART_ROOT ${CMAKE_CURRENT_LIST_DIR}/GeneralLibs/)
	find_package(3rdparty REQUIRED HINTS ${3RDPART_ROOT})
	INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
	file(GLOB_RECURSE HDRS_FILES  ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h )
	set(ENV{PATH} "$ENV{PATH}:/opt/myDir")
	MESSAGE(STATUS ¡°HOME dir: $ENV{PATH}¡±)
	FILE(GLOB_RECURSE SRCS_FILES  ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp)
	#INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})
	#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
	#SET(FILES_TO_TRANSLATE ${FILES_TO_TRANSLATE} ${SRCS_FILES} ${HDRS_FILES} ${UI_FILES}  PARENT_SCOPE)
	ADD_EXECUTABLE(${PROJECT_NAME} ${SRCS_FILES}  ${HDRS_FILES} )
	set_source_files_properties(${CD_FILES} PROPERTIES HEADER_FILE_ONLY TRUE) #DO NOT COMPILE CS FILES
	#ADD_LIBRARY(${PROJECT_NAME} STATIC ${SRCS_FILES} ${HDRS_FILES})
	target_link_libraries( ${PROJECT_NAME} ${3RDPARTY_LIBRARIES} )
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
	MESSAGE(STATUS "other platform: ${CMAKE_SYSTEM_NAME}")
ELSE ()
	MESSAGE(STATUS "other platform: ${CMAKE_SYSTEM_NAME}")
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

